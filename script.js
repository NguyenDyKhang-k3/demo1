// Global variables
let allRecords = [];
let confirmationAttempts = 0;
let currentTab = 'drinking';
let currentAdminTab = 'stats';
let currentApologyData = null;
let customConditions = [];
let savedGeo = null; // { lat, lon, address }

// JSONBin configuration
const JSONBIN_API_KEY = '$2a$10$Ctif05.NZ8KUOWPehcgSQuBr96xl1TFjwuPsWRVpOdrxPTP6aCM7C'; // Thay th·∫ø b·∫±ng API key c·ªßa b·∫°n
const JSONBIN_BIN_ID = '68c54d47d0ea881f407c8378'; // Thay th·∫ø b·∫±ng Bin ID c·ªßa b·∫°n
const JSONBIN_URL = `https://api.jsonbin.io/v3/b/${JSONBIN_BIN_ID}/latest`;
const JSONBIN_UPDATE_URL = `https://api.jsonbin.io/v3/b/${JSONBIN_BIN_ID}`;

// DOM elements
const drinkingList = document.getElementById('drinkingList');
const confirmationModal = document.getElementById('confirmationModal');
const detailModal = document.getElementById('detailModal');
const gameModal = document.getElementById('gameModal');
const adminModal = document.getElementById('adminModal');
const apologyModal = document.getElementById('apologyModal');
const stayHomeBtn = document.getElementById('stayHomeBtn');
const confirmBtn = document.getElementById('confirmBtn');
const heartAnimation = document.getElementById('heartAnimation');
const notification = document.getElementById('notification');
const locationConsentModal = document.getElementById('locationConsentModal');

// Initialize the app
document.addEventListener('DOMContentLoaded', async function() {
    await initializeJSONBin();
    await loadDrinkingRecords();
    addEventListeners();
    showWelcomeAnimation();
    initLocationFeature();
});

// Add event listeners
function addEventListeners() {
    // Add form event listeners for all forms
    const forms = document.querySelectorAll('.permission-form');
    forms.forEach(form => {
    form.addEventListener('submit', handleFormSubmit);
    });
    
    stayHomeBtn.addEventListener('click', handleStayHome);
    confirmBtn.addEventListener('click', handleConfirm);
    
    // Close modals when clicking outside
    window.addEventListener('click', function(event) {
        if (event.target === confirmationModal) {
            closeConfirmationModal();
        }
        if (event.target === detailModal) {
            closeDetailModal();
        }
        if (event.target === gameModal) {
            closeGameModal();
        }
        if (event.target === adminModal) {
            closeAdminModal();
        }
    });
}

// Location: request and persist user address (consent-based)
function initLocationFeature() {
    const btn = document.getElementById('locationBtn');
    const status = document.getElementById('locationStatus');
    const addressEl = document.getElementById('locationAddress');
    if (!btn || !status || !addressEl) return;

    // Load from localStorage
    const cached = localStorage.getItem('user_geo');
    if (cached) {
        try {
            savedGeo = JSON.parse(cached);
            status.textContent = 'ƒê√£ b·∫≠t ƒë·ªãnh v·ªã';
            if (savedGeo.address) addressEl.textContent = `üìç ${savedGeo.address}`;
        } catch {}
    }

    // Open pretty consent modal first
    btn.addEventListener('click', () => {
        openLocationConsent();
    });

    // Wire consent modal buttons
    const acceptBtn = document.getElementById('locationAcceptBtn');
    const declineBtn = document.getElementById('locationDeclineBtn');
    if (acceptBtn) acceptBtn.addEventListener('click', () => requestLocation(status, addressEl));
    if (declineBtn) declineBtn.addEventListener('click', closeLocationConsent);
}

function openLocationConsent() {
    if (locationConsentModal) {
        locationConsentModal.style.display = 'block';
    }
}

function closeLocationConsent() {
    if (locationConsentModal) {
        locationConsentModal.style.display = 'none';
    }
}

async function requestLocation(statusEl, addressEl) {
    closeLocationConsent();
    if (!('geolocation' in navigator)) {
        showNotification('Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã.', 'error');
        return;
    }
    // Check secure context (HTTPS or localhost)
    const isSecure = location.protocol === 'https:' || location.hostname === 'localhost' || location.hostname === '127.0.0.1';
    if (!isSecure) {
        showNotification('Tr√¨nh duy·ªát ch·∫∑n ƒë·ªãnh v·ªã khi kh√¥ng c√≥ HTTPS. H√£y m·ªü b·∫±ng localhost ho·∫∑c HTTPS.', 'warning');
    }
    statusEl.textContent = 'ƒêang l·∫•y v·ªã tr√≠...';
    try {
        const position = await new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(resolve, reject, {
                enableHighAccuracy: true,
                timeout: 15000,
                maximumAge: 0
            });
        });
        const lat = position.coords.latitude;
        const lon = position.coords.longitude;
        const resp = await fetch(`https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lon}&accept-language=vi`, {
            headers: { 'User-Agent': 'TinhYeu-App/1.0 (educational)' }
        });
        let addressText = '';
        if (resp.ok) {
            const data = await resp.json();
            addressText = data.display_name || '';
        }
        savedGeo = { lat, lon, address: addressText };
        localStorage.setItem('user_geo', JSON.stringify(savedGeo));
        statusEl.textContent = 'ƒê√£ b·∫≠t ƒë·ªãnh v·ªã';
        addressEl.textContent = addressText ? `üìç ${addressText}` : `Vƒ© ƒë·ªô: ${lat.toFixed(5)}, Kinh ƒë·ªô: ${lon.toFixed(5)}`;
        showNotification('ƒê√£ l∆∞u ƒë·ªãa ch·ªâ ƒë·ªãnh v·ªã.', 'success');
    } catch (err) {
        statusEl.textContent = 'Ch∆∞a b·∫≠t ƒë·ªãnh v·ªã';
        let msg = 'Kh√¥ng l·∫•y ƒë∆∞·ª£c v·ªã tr√≠.';
        if (err && typeof err.code === 'number') {
            if (err.code === 1) msg = 'B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn ƒë·ªãnh v·ªã. H√£y c·∫•p quy·ªÅn trong bi·ªÉu t∆∞·ª£ng ·ªï kh√≥a/tr√™n thanh ƒë·ªãa ch·ªâ.';
            else if (err.code === 2) msg = 'Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c v·ªã tr√≠. H√£y b·∫≠t GPS/Location v√† th·ª≠ l·∫°i.';
            else if (err.code === 3) msg = 'Qu√° th·ªùi gian ch·ªù l·∫•y v·ªã tr√≠. H√£y th·ª≠ l·∫°i g·∫ßn c·ª≠a s·ªï ho·∫∑c ngo√†i tr·ªùi.';
        }
        if (!(location.protocol === 'https:' || location.hostname === 'localhost' || location.hostname === '127.0.0.1')) {
            msg += ' L∆∞u √Ω: C·∫ßn m·ªü trang qua HTTPS ho·∫∑c localhost ƒë·ªÉ d√πng ƒë·ªãnh v·ªã.';
        }
        showNotification(msg, 'error');
    }
}

// Handle form submission
function handleFormSubmit(e) {
    e.preventDefault();
    
    const form = e.target;
    const formData = new FormData(form);
    const formType = form.dataset.type;
    
    let recordData = {
        id: Date.now(),
        type: formType,
        createdAt: new Date().toLocaleString('vi-VN')
    };
    
    // Collect form data based on type
    if (formType === 'drinking') {
        recordData = {
            ...recordData,
        drinkingWith: formData.get('drinkingWith'),
        guesser: formData.get('guesser'),
        relationship: formData.get('relationship'),
        startTime: formData.get('startTime'),
        endTime: formData.get('endTime'),
        reason: formData.get('reason'),
        drinkType: formData.get('drinkType'),
        amount: formData.get('amount'),
            commitment: formData.get('commitment')
        };
    } else if (formType === 'eating') {
        recordData = {
            ...recordData,
            eatingWith: formData.get('eatingWith'),
            eatingPlace: formData.get('eatingPlace'),
            eatingReason: formData.get('eatingReason'),
            eatingStartTime: formData.get('eatingStartTime'),
            eatingEndTime: formData.get('eatingEndTime'),
            eatingCommitment: formData.get('eatingCommitment')
        };
    } else if (formType === 'shopping') {
        recordData = {
            ...recordData,
            shoppingWith: formData.get('shoppingWith'),
            shoppingPlace: formData.get('shoppingPlace'),
            shoppingItems: formData.get('shoppingItems'),
            shoppingBudget: parseInt(formData.get('shoppingBudget')) || 0,
            shoppingStartTime: formData.get('shoppingStartTime'),
            shoppingEndTime: formData.get('shoppingEndTime')
        };
    } else if (formType === 'travel') {
        recordData = {
            ...recordData,
            travelDestination: formData.get('travelDestination'),
            travelWith: formData.get('travelWith'),
            travelStartDate: formData.get('travelStartDate'),
            travelEndDate: formData.get('travelEndDate'),
            travelReason: formData.get('travelReason'),
            travelAccommodation: formData.get('travelAccommodation')
        };
    } else if (formType === 'hanging') {
        recordData = {
            ...recordData,
            hangingWith: formData.get('hangingWith'),
            hangingActivity: formData.get('hangingActivity'),
            hangingPlace: formData.get('hangingPlace'),
            hangingStartTime: formData.get('hangingStartTime'),
            hangingEndTime: formData.get('hangingEndTime'),
            hangingCommitment: formData.get('hangingCommitment')
        };
    } else if (formType === 'work') {
        recordData = {
            ...recordData,
            workType: formData.get('workType'),
            workLocation: formData.get('workLocation'),
            workReason: formData.get('workReason'),
            workStartTime: formData.get('workStartTime'),
            workEndTime: formData.get('workEndTime'),
            workCommitment: formData.get('workCommitment')
        };
    } else if (formType === 'study') {
        recordData = {
            ...recordData,
            studyType: formData.get('studyType'),
            studySubject: formData.get('studySubject'),
            studyLocation: formData.get('studyLocation'),
            studyWith: formData.get('studyWith'),
            studyStartTime: formData.get('studyStartTime'),
            studyEndTime: formData.get('studyEndTime'),
            studyReason: formData.get('studyReason')
        };
    } else if (formType === 'sports') {
        recordData = {
            ...recordData,
            sportType: formData.get('sportType'),
            sportLocation: formData.get('sportLocation'),
            sportWith: formData.get('sportWith'),
            sportStartTime: formData.get('sportStartTime'),
            sportEndTime: formData.get('sportEndTime'),
            sportIntensity: formData.get('sportIntensity'),
            sportCommitment: formData.get('sportCommitment')
        };
    } else if (formType === 'health') {
        recordData = {
            ...recordData,
            healthType: formData.get('healthType'),
            healthLocation: formData.get('healthLocation'),
            healthDoctor: formData.get('healthDoctor'),
            healthSymptoms: formData.get('healthSymptoms'),
            healthStartTime: formData.get('healthStartTime'),
            healthEndTime: formData.get('healthEndTime'),
            healthUrgency: formData.get('healthUrgency')
        };
    } else if (formType === 'family') {
        recordData = {
            ...recordData,
            familyType: formData.get('familyType'),
            familyWith: formData.get('familyWith'),
            familyLocation: formData.get('familyLocation'),
            familyStartTime: formData.get('familyStartTime'),
            familyEndTime: formData.get('familyEndTime'),
            familyReason: formData.get('familyReason')
        };
        } else if (formType === 'other') {
            recordData = {
                ...recordData,
                otherType: formData.get('otherType'),
                otherWith: formData.get('otherWith'),
                otherLocation: formData.get('otherLocation'),
                otherStartTime: formData.get('otherStartTime'),
                otherEndTime: formData.get('otherEndTime'),
                otherDescription: formData.get('otherDescription')
            };
        } else if (formType === 'apology') {
            recordData = {
                ...recordData,
                apologyReason: formData.get('apologyReason'),
                apologySeverity: formData.get('apologySeverity'),
                apologyMessage: formData.get('apologyMessage'),
                apologyPromise: formData.get('apologyPromise'),
                apologyCompensation: formData.get('apologyCompensation')
            };
            
            // Show apology modal instead of saving directly
            showApologyModal(recordData);
            return; // Don't save yet, wait for response
        }
    
    // Attach location snapshot if available
    if (savedGeo) {
        recordData.location = { ...savedGeo };
    }

    // Show confirmation modal
    showConfirmationModal(recordData);
}

// Show confirmation modal
function showConfirmationModal(drinkingData) {
    confirmationModal.style.display = 'block';
    confirmationAttempts = 0;
    
    // Store the data temporarily
    confirmationModal.drinkingData = drinkingData;
    
    // Reset button states
    stayHomeBtn.className = 'btn-stay-home';
    confirmBtn.className = 'btn-confirm';
    
    // Add floating hearts effect
    createFloatingHearts();
}

// Close confirmation modal
function closeConfirmationModal() {
    confirmationModal.style.display = 'none';
    confirmationAttempts = 0;
}

// Handle stay home button
function handleStayHome() {
    // Save the stay home decision
    const stayHomeData = {
        id: Date.now(),
        type: 'stay_home_decision',
        action: 'stay_home',
        originalData: confirmationModal.drinkingData,
        timestamp: new Date().toLocaleString('vi-VN')
    };
    
    // Save stay home decision to records
    allRecords.push(stayHomeData);
    saveAllRecords();
    
    closeConfirmationModal();
    showHeartAnimation();
    showNotification('üíï Em y√™u l√† s·ªë 1! C·∫£m ∆°n em ƒë√£ ch·ªçn ·ªü nh√† v·ªõi anh! üíï', 'success');
}

// Handle confirm button
function handleConfirm() {
    confirmationAttempts++;
    
    // Always save the confirmation attempt
    const confirmationData = {
        id: Date.now(),
        type: 'confirmation_attempt',
        attempt: confirmationAttempts,
        action: 'confirm',
        originalData: confirmationModal.drinkingData,
        timestamp: new Date().toLocaleString('vi-VN')
    };
    
    // Save confirmation attempt to records
    allRecords.push(confirmationData);
    saveAllRecords();
    
    if (confirmationAttempts <= 3) {
        // Update button states based on attempt
        updateButtonStates();
        
        if (confirmationAttempts === 3) {
            // Show cruel message and broken heart
            setTimeout(() => {
                showCruelMessage();
            }, 500);
        }
    } else {
        // After 3 attempts, actually save the original data
        saveDrinkingRecord(confirmationModal.drinkingData);
        closeConfirmationModal();
        showNotification('üò¢ ƒê√£ l∆∞u l·ªãch nh·∫≠u... Ng∆∞·ªùi y√™u s·∫Ω bu·ªìn l·∫Øm ƒë·∫•y! üò¢', 'warning');
    }
}

// Update button states based on confirmation attempts
function updateButtonStates() {
    const modalContent = document.querySelector('.modal-content');
    modalContent.className = `modal-content attempt-${confirmationAttempts}`;
    
    if (confirmationAttempts === 1) {
        showNotification('üíî L·∫ßn 1: Em th·∫≠t s·ª± mu·ªën ƒëi nh·∫≠u √†? üíî', 'warning');
    } else if (confirmationAttempts === 2) {
        showNotification('üíî L·∫ßn 2: Anh s·∫Ω r·∫•t bu·ªìn n·∫øu em ƒëi... üíî', 'warning');
    } else if (confirmationAttempts === 3) {
        showNotification('üíî L·∫ßn 3: Em th·∫≠t t√†n √°c! üíî', 'error');
    }
}

// Show cruel message
function showCruelMessage() {
    const modalBody = document.querySelector('.modal-body');
    const cruelDiv = document.createElement('div');
    cruelDiv.innerHTML = `
        <div class="cruel-text">T√ÄN √ÅC!</div>
        <div class="broken-heart">üíî</div>
        <p>Tr√°i tim em ƒë√£ tan v·ª°...</p>
    `;
    modalBody.appendChild(cruelDiv);
    
    // Remove the cruel message after 3 seconds and show breaking heart
    setTimeout(() => {
        cruelDiv.remove();
        // Show breaking heart animation
        createBreakingHeartAnimation();
    }, 3000);
}

// Show heart animation
function showHeartAnimation() {
    heartAnimation.style.display = 'block';
    
    setTimeout(() => {
        heartAnimation.style.display = 'none';
    }, 3000);
}

// Load all records from JSONBin
async function loadDrinkingRecords() {
    try {
        const response = await fetch(JSONBIN_URL, {
            headers: {
                'X-Master-Key': JSONBIN_API_KEY
            }
        });
        
        if (response.ok) {
            const result = await response.json();
            // Ensure allRecords is always an array
            allRecords = Array.isArray(result.record) ? result.record : [];
            console.log('Loaded from JSONBin:', allRecords);
        } else {
            // Fallback to localStorage if JSONBin fails
            const localData = localStorage.getItem('allRecords');
            allRecords = localData ? JSON.parse(localData) : [];
            console.log('Loaded from localStorage:', allRecords);
        }
    } catch (error) {
        console.log('Error loading data, using localStorage:', error);
        const localData = localStorage.getItem('allRecords');
        allRecords = localData ? JSON.parse(localData) : [];
    }
    
    // Ensure allRecords is always an array before rendering
    if (!Array.isArray(allRecords)) {
        allRecords = [];
    }
    
    renderDrinkingList();
}

// Initialize JSONBin with empty array if needed
async function initializeJSONBin() {
    try {
        const response = await fetch(JSONBIN_URL, {
            headers: {
                'X-Master-Key': JSONBIN_API_KEY
            }
        });
        
        if (!response.ok && response.status === 404) {
            // Bin doesn't exist, create it with empty array
            await fetch(JSONBIN_UPDATE_URL, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Master-Key': JSONBIN_API_KEY
                },
                body: JSON.stringify([])
            });
            console.log('Created new JSONBin with empty array');
        }
    } catch (error) {
        console.log('Error initializing JSONBin:', error);
    }
}

// Save record to JSONBin
async function saveDrinkingRecord(data) {
    allRecords.push(data);
    
    try {
        const response = await fetch(JSONBIN_UPDATE_URL, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'X-Master-Key': JSONBIN_API_KEY
            },
            body: JSON.stringify(allRecords)
        });
        
        if (response.ok) {
            console.log('D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o JSONBin');
            // Show success notification
            showNotification('‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng! D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô.', 'success');
        } else {
            throw new Error('L·ªói khi l∆∞u v√†o JSONBin');
        }
    } catch (error) {
        console.log('L∆∞u v√†o localStorage l√†m backup');
        localStorage.setItem('allRecords', JSON.stringify(allRecords));
        showNotification('‚ö†Ô∏è ƒê√£ l∆∞u v√†o b·ªô nh·ªõ c·ª•c b·ªô. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.', 'warning');
    }
    
    // Always update UI immediately
    renderDrinkingList();
    updateAdminStats();
    
    // Reset the current form
    const currentForm = document.querySelector(`.permission-form.active`);
    if (currentForm) {
        currentForm.reset();
    }
}

// Render drinking list
function renderDrinkingList() {
    // Ensure allRecords is an array
    if (!Array.isArray(allRecords)) {
        console.error('allRecords is not an array:', allRecords);
        allRecords = [];
    }
    
    if (allRecords.length === 0) {
        drinkingList.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-heart-broken"></i>
                <p>Ch∆∞a c√≥ ƒë∆°n xin ph√©p n√†o ƒë∆∞·ª£c ƒëƒÉng k√Ω</p>
            </div>
        `;
        return;
    }
    
    drinkingList.innerHTML = allRecords.map(record => {
        const icons = {
            drinking: 'üçª',
            eating: 'üçΩÔ∏è',
            shopping: 'üõçÔ∏è',
            travel: '‚úàÔ∏è',
            hanging: 'üéÆ',
            work: 'üíº',
            study: 'üéì',
            sports: 'üèÉ‚Äç‚ôÇÔ∏è',
            health: 'üè•',
            family: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
            other: 'üìù',
            confirmation_attempt: 'üíî',
            stay_home_decision: 'üíï',
            apology_accepted: 'üíï',
            apology_rejected: 'üíî'
        };
        
        const icon = icons[record.type] || 'üìã';
        
        let title = 'Ho·∫°t ƒë·ªông';
        if (record.type === 'confirmation_attempt') {
            title = `L·∫ßn x√°c nh·∫≠n th·ª© ${record.attempt}`;
        } else if (record.type === 'stay_home_decision') {
            title = 'Quy·∫øt ƒë·ªãnh ·ªü nh√†';
        } else if (record.type === 'apology_accepted') {
            title = `Xin l·ªói: ${record.apologyReason}`;
        } else if (record.type === 'apology_rejected') {
            title = `Xin l·ªói: ${record.apologyReason}`;
        } else {
            title = record.type === 'drinking' ? record.drinkingWith : 
                   record.type === 'eating' ? record.eatingWith :
                   record.type === 'shopping' ? record.shoppingWith :
                   record.type === 'travel' ? record.travelDestination :
                   record.type === 'hanging' ? record.hangingWith :
                   record.type === 'work' ? record.workType :
                   record.type === 'study' ? record.studySubject :
                   record.type === 'sports' ? record.sportType :
                   record.type === 'health' ? record.healthType :
                   record.type === 'family' ? record.familyType :
                   record.type === 'other' ? record.otherType : 'Ho·∫°t ƒë·ªông';
        }
        
        return `
        <div class="drinking-item" onclick="showDetail(${record.id})">
                <h3>${icon} ${title}</h3>
                <p><strong>Lo·∫°i:</strong> ${getTypeDisplayName(record.type)}</p>
                ${record.type === 'confirmation_attempt' || record.type === 'stay_home_decision' ? 
                    `<p><strong>H√†nh ƒë·ªông:</strong> ${record.action === 'confirm' ? 'X√°c nh·∫≠n' : '·ªû nh√†'}</p>` :
                    `<p><strong>Th·ªùi gian:</strong> ${record.startTime || record.travelStartDate || record.studyStartTime || record.sportStartTime || record.healthStartTime || record.familyStartTime || record.otherStartTime} - ${record.endTime || record.travelEndDate || record.studyEndTime || record.sportEndTime || record.healthEndTime || record.familyEndTime || record.otherEndTime}</p>`
                }
                <p><strong>Ng√†y t·∫°o:</strong> ${record.createdAt || record.timestamp}</p>
        </div>
        `;
    }).join('');
}

// Get display name for record type
function getTypeDisplayName(type) {
    const names = {
        drinking: 'ƒêi nh·∫≠u',
        eating: 'ƒêi ƒÉn',
        shopping: 'Mua s·∫Øm',
        travel: 'Du l·ªãch',
        hanging: 'ƒêi ch∆°i',
        work: 'C√¥ng vi·ªác',
        study: 'H·ªçc t·∫≠p',
        sports: 'Th·ªÉ thao',
        health: 'S·ª©c kh·ªèe',
        family: 'Gia ƒë√¨nh',
        other: 'Kh√°c',
        confirmation_attempt: 'L·∫ßn x√°c nh·∫≠n',
        stay_home_decision: 'Quy·∫øt ƒë·ªãnh ·ªü nh√†',
        apology_accepted: 'Xin l·ªói (ƒë√£ tha th·ª©)',
        apology_rejected: 'Xin l·ªói (ch∆∞a tha th·ª©)'
    };
    return names[type] || type;
}

// Tab switching functions
function switchTab(tabName) {
    // Update active tab
    document.querySelectorAll('.nav-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');
    
    // Update active form
    document.querySelectorAll('.permission-form').forEach(form => {
        form.classList.remove('active');
    });
    document.getElementById(`${tabName}Form`).classList.add('active');
    
    currentTab = tabName;
}

// Show detail modal
function showDetail(id) {
    const record = allRecords.find(r => r.id === id);
    if (!record) return;
    
    const detailContent = document.getElementById('detailContent');
    
    let detailHTML = `
        <div class="detail-item">
            <h4>üìã Th√¥ng tin chi ti·∫øt - ${getTypeDisplayName(record.type)}</h4>
    `;
    
    // Generate detail content based on record type
    if (record.type === 'drinking') {
        detailHTML += `
            <p><strong>Nh·∫≠u v·ªõi ai:</strong> ${record.drinkingWith}</p>
            <p><strong>Ng∆∞·ªùi ƒë∆∞a ƒëo√°n:</strong> ${record.guesser}</p>
            <p><strong>Quan h·ªá:</strong> ${record.relationship}</p>
            <p><strong>Gi·ªù ƒëi:</strong> ${record.startTime}</p>
            <p><strong>Gi·ªù v·ªÅ:</strong> ${record.endTime}</p>
            <p><strong>L√Ω do nh·∫≠u:</strong> ${record.reason}</p>
            <p><strong>Lo·∫°i ƒë·ªì u·ªëng:</strong> ${record.drinkType}</p>
            <p><strong>S·ªë l∆∞·ª£ng:</strong> ${record.amount}</p>
            <p><strong>Cam k·∫øt:</strong> ${record.commitment}</p>
        `;
    } else if (record.type === 'eating') {
        detailHTML += `
            <p><strong>ƒÇn v·ªõi ai:</strong> ${record.eatingWith}</p>
            <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${record.eatingPlace}</p>
            <p><strong>L√Ω do:</strong> ${record.eatingReason}</p>
            <p><strong>Gi·ªù ƒëi:</strong> ${record.eatingStartTime}</p>
            <p><strong>Gi·ªù v·ªÅ:</strong> ${record.eatingEndTime}</p>
            <p><strong>Cam k·∫øt:</strong> ${record.eatingCommitment}</p>
        `;
    } else if (record.type === 'shopping') {
        detailHTML += `
            <p><strong>Mua s·∫Øm v·ªõi ai:</strong> ${record.shoppingWith}</p>
            <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${record.shoppingPlace}</p>
            <p><strong>M·ª•c ƒë√≠ch:</strong> ${record.shoppingItems}</p>
            <p><strong>Ng√¢n s√°ch:</strong> ${record.shoppingBudget ? record.shoppingBudget.toLocaleString() + ' VNƒê' : 'Kh√¥ng x√°c ƒë·ªãnh'}</p>
            <p><strong>Gi·ªù ƒëi:</strong> ${record.shoppingStartTime}</p>
            <p><strong>Gi·ªù v·ªÅ:</strong> ${record.shoppingEndTime}</p>
        `;
    } else if (record.type === 'travel') {
        detailHTML += `
            <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${record.travelDestination}</p>
            <p><strong>ƒêi v·ªõi ai:</strong> ${record.travelWith}</p>
            <p><strong>Ng√†y ƒëi:</strong> ${record.travelStartDate}</p>
            <p><strong>Ng√†y v·ªÅ:</strong> ${record.travelEndDate}</p>
            <p><strong>L√Ω do:</strong> ${record.travelReason}</p>
            <p><strong>N∆°i ·ªü:</strong> ${record.travelAccommodation || 'Ch∆∞a x√°c ƒë·ªãnh'}</p>
        `;
    } else if (record.type === 'hanging') {
        detailHTML += `
            <p><strong>Ch∆°i v·ªõi ai:</strong> ${record.hangingWith}</p>
            <p><strong>Ho·∫°t ƒë·ªông:</strong> ${record.hangingActivity}</p>
            <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${record.hangingPlace}</p>
            <p><strong>Gi·ªù ƒëi:</strong> ${record.hangingStartTime}</p>
            <p><strong>Gi·ªù v·ªÅ:</strong> ${record.hangingEndTime}</p>
            <p><strong>Cam k·∫øt:</strong> ${record.hangingCommitment}</p>
        `;
    } else if (record.type === 'work') {
        detailHTML += `
            <p><strong>Lo·∫°i c√¥ng vi·ªác:</strong> ${record.workType}</p>
            <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${record.workLocation}</p>
            <p><strong>L√Ω do:</strong> ${record.workReason}</p>
            <p><strong>Gi·ªù b·∫Øt ƒë·∫ßu:</strong> ${record.workStartTime}</p>
            <p><strong>Gi·ªù k·∫øt th√∫c:</strong> ${record.workEndTime}</p>
            <p><strong>Cam k·∫øt:</strong> ${record.workCommitment}</p>
        `;
    } else if (record.type === 'study') {
        detailHTML += `
            <p><strong>Lo·∫°i h·ªçc t·∫≠p:</strong> ${record.studyType}</p>
            <p><strong>M√¥n h·ªçc:</strong> ${record.studySubject}</p>
            <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${record.studyLocation}</p>
            <p><strong>H·ªçc v·ªõi ai:</strong> ${record.studyWith}</p>
            <p><strong>Gi·ªù b·∫Øt ƒë·∫ßu:</strong> ${record.studyStartTime}</p>
            <p><strong>Gi·ªù k·∫øt th√∫c:</strong> ${record.studyEndTime}</p>
            <p><strong>L√Ω do:</strong> ${record.studyReason}</p>
        `;
    } else if (record.type === 'sports') {
        detailHTML += `
            <p><strong>Lo·∫°i th·ªÉ thao:</strong> ${record.sportType}</p>
            <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${record.sportLocation}</p>
            <p><strong>Ch∆°i v·ªõi ai:</strong> ${record.sportWith}</p>
            <p><strong>Gi·ªù b·∫Øt ƒë·∫ßu:</strong> ${record.sportStartTime}</p>
            <p><strong>Gi·ªù k·∫øt th√∫c:</strong> ${record.sportEndTime}</p>
            <p><strong>C∆∞·ªùng ƒë·ªô:</strong> ${record.sportIntensity}</p>
            <p><strong>Cam k·∫øt:</strong> ${record.sportCommitment}</p>
        `;
    } else if (record.type === 'health') {
        detailHTML += `
            <p><strong>Lo·∫°i s·ª©c kh·ªèe:</strong> ${record.healthType}</p>
            <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${record.healthLocation}</p>
            <p><strong>B√°c sƒ©:</strong> ${record.healthDoctor}</p>
            <p><strong>Tri·ªáu ch·ª©ng:</strong> ${record.healthSymptoms}</p>
            <p><strong>Gi·ªù b·∫Øt ƒë·∫ßu:</strong> ${record.healthStartTime}</p>
            <p><strong>Gi·ªù k·∫øt th√∫c:</strong> ${record.healthEndTime}</p>
            <p><strong>M·ª©c ƒë·ªô kh·∫©n c·∫•p:</strong> ${record.healthUrgency}</p>
        `;
    } else if (record.type === 'family') {
        detailHTML += `
            <p><strong>Lo·∫°i ho·∫°t ƒë·ªông gia ƒë√¨nh:</strong> ${record.familyType}</p>
            <p><strong>V·ªõi ai:</strong> ${record.familyWith}</p>
            <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${record.familyLocation}</p>
            <p><strong>Gi·ªù b·∫Øt ƒë·∫ßu:</strong> ${record.familyStartTime}</p>
            <p><strong>Gi·ªù k·∫øt th√∫c:</strong> ${record.familyEndTime}</p>
            <p><strong>L√Ω do:</strong> ${record.familyReason}</p>
        `;
    } else if (record.type === 'other') {
        detailHTML += `
            <p><strong>Lo·∫°i ho·∫°t ƒë·ªông:</strong> ${record.otherType}</p>
            <p><strong>V·ªõi ai:</strong> ${record.otherWith}</p>
            <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> ${record.otherLocation}</p>
            <p><strong>Gi·ªù b·∫Øt ƒë·∫ßu:</strong> ${record.otherStartTime}</p>
            <p><strong>Gi·ªù k·∫øt th√∫c:</strong> ${record.otherEndTime}</p>
            <p><strong>M√¥ t·∫£:</strong> ${record.otherDescription}</p>
        `;
    } else if (record.type === 'confirmation_attempt') {
        detailHTML += `
            <p><strong>L·∫ßn x√°c nh·∫≠n:</strong> ${record.attempt}</p>
            <p><strong>H√†nh ƒë·ªông:</strong> X√°c nh·∫≠n ƒëi nh·∫≠u</p>
            <p><strong>D·ªØ li·ªáu g·ªëc:</strong> ${record.originalData ? JSON.stringify(record.originalData, null, 2) : 'Kh√¥ng c√≥'}</p>
        `;
    } else if (record.type === 'stay_home_decision') {
        detailHTML += `
            <p><strong>H√†nh ƒë·ªông:</strong> Quy·∫øt ƒë·ªãnh ·ªü nh√†</p>
            <p><strong>D·ªØ li·ªáu g·ªëc:</strong> ${record.originalData ? JSON.stringify(record.originalData, null, 2) : 'Kh√¥ng c√≥'}</p>
        `;
    } else if (record.type === 'apology_accepted') {
        detailHTML += `
            <p><strong>L√Ω do xin l·ªói:</strong> ${record.apologyReason}</p>
            <p><strong>M·ª©c ƒë·ªô:</strong> ${record.apologySeverity}</p>
            <p><strong>L·ªùi xin l·ªói:</strong> ${record.apologyMessage}</p>
            <p><strong>L·ªùi h·ª©a:</strong> ${record.apologyPromise}</p>
            <p><strong>B√π ƒë·∫Øp:</strong> ${record.apologyCompensation}</p>
            <p><strong>Tr·∫°ng th√°i:</strong> ƒê√£ ƒë∆∞·ª£c tha th·ª© üíï</p>
            <p><strong>ƒêi·ªÅu ki·ªán:</strong> ${record.conditions ? record.conditions.join(', ') : 'Kh√¥ng c√≥'}</p>
        `;
    } else if (record.type === 'apology_rejected') {
        detailHTML += `
            <p><strong>L√Ω do xin l·ªói:</strong> ${record.apologyReason}</p>
            <p><strong>M·ª©c ƒë·ªô:</strong> ${record.apologySeverity}</p>
            <p><strong>L·ªùi xin l·ªói:</strong> ${record.apologyMessage}</p>
            <p><strong>L·ªùi h·ª©a:</strong> ${record.apologyPromise}</p>
            <p><strong>B√π ƒë·∫Øp:</strong> ${record.apologyCompensation}</p>
            <p><strong>Tr·∫°ng th√°i:</strong> Ch∆∞a ƒë∆∞·ª£c tha th·ª© üíî</p>
            <p><strong>ƒêi·ªÅu ki·ªán:</strong> ${record.conditions ? record.conditions.join(', ') : 'Kh√¥ng c√≥'}</p>
        `;
    }
    
    // Location if exists
    if (record.location) {
        const loc = record.location;
        detailHTML += `
            <p><strong>V·ªã tr√≠ (l√∫c g·ª≠i):</strong> ${loc.address ? loc.address : `Lat ${loc.lat}, Lon ${loc.lon}`}</p>
        `;
    }

    detailHTML += `
            <p><strong>Ng√†y t·∫°o:</strong> ${record.createdAt || record.timestamp}</p>
        </div>
    `;
    
    detailContent.innerHTML = detailHTML;
    
    detailModal.style.display = 'block';
}

// Close detail modal
function closeDetailModal() {
    detailModal.style.display = 'none';
}

// Show apology modal
function showApologyModal(apologyData) {
    currentApologyData = apologyData;
    customConditions = [];
    
    const apologyContent = document.getElementById('apologyContent');
    const forgivenessConditions = document.getElementById('forgivenessConditions');
    
    // Display apology content
    apologyContent.innerHTML = `
        <div class="apology-display">
            <h3>üíî L·ªùi Xin L·ªói T·ª´ Anh üíî</h3>
            <p><strong>L√Ω do anh xin l·ªói:</strong> ${apologyData.apologyReason}</p>
            <p><strong>Anh bi·∫øt em c·∫£m th·∫•y:</strong> ${apologyData.apologySeverity}</p>
            <div class="apology-message-box">
                <h4>üíå L·ªùi xin l·ªói ch√¢n th√†nh:</h4>
                <p class="apology-text">"${apologyData.apologyMessage}"</p>
            </div>
            <div class="promise-box">
                <h4>ü§ù L·ªùi h·ª©a c·ªßa anh:</h4>
                <p class="promise-text">"${apologyData.apologyPromise}"</p>
            </div>
            <div class="compensation-box">
                <h4>üíù Anh s·∫Ω b√π ƒë·∫Øp b·∫±ng c√°ch:</h4>
                <p class="compensation-text">"${apologyData.apologyCompensation}"</p>
            </div>
        </div>
    `;
    
    // Show conditions section
    forgivenessConditions.style.display = 'block';
    updateConditionsList();
    
    apologyModal.style.display = 'block';
}

// Close apology modal
function closeApologyModal() {
    apologyModal.style.display = 'none';
    currentApologyData = null;
    customConditions = [];
}

// Add custom condition
function addCustomCondition() {
    const customConditionInput = document.getElementById('customCondition');
    const condition = customConditionInput.value.trim();
    
    if (condition) {
        customConditions.push(condition);
        customConditionInput.value = '';
        updateConditionsList();
    }
}

// Update conditions list
function updateConditionsList() {
    const conditionsList = document.getElementById('conditionsList');
    
    // Default conditions based on severity
    let defaultConditions = [];
    if (currentApologyData) {
        switch (currentApologyData.apologySeverity) {
            case 'Nh·∫π - Em ch·ªâ h∆°i bu·ªìn':
                defaultConditions = [
                    'Mua em m·ªôt ly tr√† s·ªØa ngon',
                    '√îm em th·∫≠t ch·∫∑t 5 ph√∫t',
                    'N√≥i "Anh y√™u em" 10 l·∫ßn m·ªói ng√†y',
                    'Massage vai cho em',
                    'Khen em xinh ƒë·∫πp'
                ];
                break;
            case 'Trung b√¨nh - Em kh√° t·ª©c gi·∫≠n':
                defaultConditions = [
                    'Mua em m·ªôt m√≥n ƒë·ªì em th√≠ch',
                    'Massage ch√¢n cho em 15 ph√∫t',
                    'L√†m vi·ªác nh√† c·∫£ tu·∫ßn',
                    'H·ª©a kh√¥ng t√°i ph·∫°m trong 1 th√°ng',
                    'ƒê∆∞a em ƒëi ƒÉn m√≥n em th√≠ch',
                    'Vi·∫øt th∆∞ t√¨nh cho em'
                ];
                break;
            case 'N·∫∑ng - Em r·∫•t t·ª©c gi·∫≠n':
                defaultConditions = [
                    'Mua em m·ªôt m√≥n qu√† ƒë·∫Øt ti·ªÅn',
                    'N·∫•u ƒÉn cho em c·∫£ tu·∫ßn',
                    'L√†m t·∫•t c·∫£ vi·ªác nh√† trong 2 tu·∫ßn',
                    'Kh√¥ng ƒë∆∞·ª£c ƒëi nh·∫≠u trong 1 th√°ng',
                    'Vi·∫øt th∆∞ t√¨nh 1000 t·ª´',
                    'ƒê∆∞a em ƒëi spa',
                    'H√°t t√¨nh ca cho em nghe'
                ];
                break;
            case 'R·∫•t n·∫∑ng - Em mu·ªën chia tay':
                defaultConditions = [
                    'Mua em m·ªôt m√≥n qu√† r·∫•t ƒë·∫Øt ti·ªÅn',
                    'N·∫•u ƒÉn v√† d·ªçn d·∫πp nh√† c·∫£ th√°ng',
                    'Kh√¥ng ƒë∆∞·ª£c ƒëi nh·∫≠u trong 3 th√°ng',
                    'Vi·∫øt nh·∫≠t k√Ω t√¨nh y√™u m·ªói ng√†y',
                    'ƒê∆∞a em ƒëi du l·ªãch',
                    'H·ª©a s·∫Ω thay ƒë·ªïi ho√†n to√†n',
                    'T·ªï ch·ª©c bu·ªïi h·∫πn h√≤ ƒë·∫∑c bi·ªát',
                    'L√†m video t√¨nh y√™u cho em'
                ];
                break;
        }
    }
    
    const allConditions = [...defaultConditions, ...customConditions];
    
    conditionsList.innerHTML = allConditions.map((condition, index) => `
        <div class="condition-item">
            ${condition}
            ${index >= defaultConditions.length ? 
                `<button class="remove-condition" onclick="removeCondition(${index - defaultConditions.length})">X</button>` : 
                ''
            }
        </div>
    `).join('');
}

// Remove custom condition
function removeCondition(index) {
    customConditions.splice(index, 1);
    updateConditionsList();
}

// Accept apology
function acceptApology() {
    if (currentApologyData) {
        const apologyRecord = {
            ...currentApologyData,
            id: Date.now(),
            type: 'apology_accepted',
            status: 'accepted',
            conditions: [...document.querySelectorAll('.condition-item')].map(item => 
                item.textContent.replace('X', '').trim()
            ),
            timestamp: new Date().toLocaleString('vi-VN')
        };
        
        allRecords.push(apologyRecord);
        saveAllRecords();
        
        closeApologyModal();
        showNotification('üíï C·∫£m ∆°n em ƒë√£ tha th·ª© cho anh! Anh y√™u em r·∫•t nhi·ªÅu v√† s·∫Ω c·ªë g·∫Øng l√†m t·ªët h∆°n! üíï', 'success');
        createFloatingHearts();
    }
}

// Reject apology
function rejectApology() {
    if (currentApologyData) {
        const apologyRecord = {
            ...currentApologyData,
            id: Date.now(),
            type: 'apology_rejected',
            status: 'rejected',
            conditions: [...document.querySelectorAll('.condition-item')].map(item => 
                item.textContent.replace('X', '').trim()
            ),
            timestamp: new Date().toLocaleString('vi-VN')
        };
        
        allRecords.push(apologyRecord);
        saveAllRecords();
        
        closeApologyModal();
        showNotification('üíî Anh hi·ªÉu em v·∫´n c√≤n gi·∫≠n... Anh s·∫Ω c·ªë g·∫Øng h∆°n n·ªØa ƒë·ªÉ em tha th·ª© cho anh! üíî', 'warning');
        // Show breaking heart animation
        createBreakingHeartAnimation();
    }
}

// Show notification
function showNotification(message, type = 'info') {
    notification.textContent = message;
    notification.className = `notification show ${type}`;
    
    setTimeout(() => {
        notification.className = 'notification';
    }, 3000);
}

// Create floating hearts effect
function createFloatingHearts() {
    const modal = document.querySelector('.modal-content');
    
    for (let i = 0; i < 10; i++) {
        setTimeout(() => {
            const heart = document.createElement('div');
            heart.innerHTML = 'üíï';
            heart.style.position = 'absolute';
            heart.style.fontSize = '1.5rem';
            heart.style.left = Math.random() * 100 + '%';
            heart.style.top = Math.random() * 100 + '%';
            heart.style.animation = 'float 3s ease-in-out infinite';
            heart.style.pointerEvents = 'none';
            heart.style.zIndex = '1001';
            
            modal.appendChild(heart);
            
            setTimeout(() => {
                heart.remove();
            }, 3000);
        }, i * 200);
    }
}

// Create breaking heart animation
function createBreakingHeartAnimation() {
    const breakingHeartAnimation = document.getElementById('breakingHeartAnimation');
    const heartPieces = document.querySelector('.heart-pieces');
    
    // Show the animation
    breakingHeartAnimation.style.display = 'block';
    
    // Add vibration effect if supported
    if ('vibrate' in navigator) {
        navigator.vibrate([200, 100, 200, 100, 400]);
    }
    
    // After 3 seconds, start the breaking animation
    setTimeout(() => {
        // Hide the beating heart with fade effect
        const beatingHeart = document.querySelector('.heart-beating');
        beatingHeart.style.animation = 'none';
        beatingHeart.style.opacity = '0';
        beatingHeart.style.transform = 'scale(0)';
        beatingHeart.style.transition = 'all 0.5s ease-in-out';
        
        // Create heart pieces with more variety
        const heartEmojis = ['üíî', 'üíî', 'üíî', 'üíî', 'üíî', 'üíî', 'üíî', 'üíî', 'üíî', 'üíî', 'üíî', 'üíî'];
        
        heartEmojis.forEach((emoji, index) => {
            const piece = document.createElement('div');
            piece.className = 'heart-piece';
            piece.innerHTML = emoji;
            
            // Random position around center with more variation
            const angle = (index / heartEmojis.length) * 2 * Math.PI + (Math.random() - 0.5) * 0.5;
            const distance = 300 + Math.random() * 500;
            const dx = Math.cos(angle) * distance;
            const dy = Math.sin(angle) * distance;
            const rotation = Math.random() * 720; // More rotation
            
            // Set CSS custom properties for animation
            piece.style.setProperty('--dx', dx + 'px');
            piece.style.setProperty('--dy', dy + 'px');
            piece.style.setProperty('--rotation', rotation + 'deg');
            
            // Position at center initially
            piece.style.left = '50%';
            piece.style.top = '50%';
            piece.style.transform = 'translate(-50%, -50%)';
            
            // Add random delay for staggered animation
            piece.style.animationDelay = (Math.random() * 0.5) + 's';
            
            heartPieces.appendChild(piece);
        });
        
        // Hide the animation after 6 seconds
        setTimeout(() => {
            breakingHeartAnimation.style.display = 'none';
            // Clear pieces
            heartPieces.innerHTML = '';
            // Reset beating heart for next use
            const beatingHeart = document.querySelector('.heart-beating');
            beatingHeart.style.display = 'block';
            beatingHeart.style.opacity = '1';
            beatingHeart.style.transform = 'scale(1)';
            beatingHeart.style.animation = 'heartBeat 3s ease-in-out';
            beatingHeart.style.transition = 'none';
        }, 6000);
        
    }, 3000);
}

// Show welcome animation
function showWelcomeAnimation() {
    // Create welcome message
    const welcomeDiv = document.createElement('div');
    welcomeDiv.innerHTML = `
        <div style="
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(45deg, #e91e63, #ff6b9d);
            color: white;
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            z-index: 2000;
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
            animation: slideInDown 0.8s ease;
        ">
            <h2 style="font-family: 'Dancing Script', cursive; font-size: 2.5rem; margin-bottom: 15px;">
                üíï Ch√†o m·ª´ng ƒë·∫øn v·ªõi trang web ƒë·∫∑c bi·ªát üíï
            </h2>
            <p style="font-size: 1.2rem; margin-bottom: 20px;">
                D√†nh cho V√µ Th·ªã Ng·ªçc Mu·ªôi
            </p>
            <p style="font-size: 1rem; opacity: 0.9;">
                H√£y ƒëi·ªÅn form ƒë·ªÉ ƒëƒÉng k√Ω l·ªãch nh·∫≠u nh√©! üòä
            </p>
        </div>
    `;
    
    document.body.appendChild(welcomeDiv);
    
    // Remove welcome message after 3 seconds
    setTimeout(() => {
        welcomeDiv.style.animation = 'fadeOut 0.5s ease';
        setTimeout(() => {
            welcomeDiv.remove();
        }, 500);
    }, 3000);
}

// Add CSS for fadeOut animation
const style = document.createElement('style');
style.textContent = `
    @keyframes fadeOut {
        from { opacity: 1; transform: translate(-50%, -50%) scale(1); }
        to { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
    }
`;
document.head.appendChild(style);

// Add some interactive effects
document.addEventListener('mousemove', function(e) {
    // Create floating hearts on mouse move
    if (Math.random() < 0.02) {
        createFloatingHeart(e.clientX, e.clientY);
    }
});

function createFloatingHeart(x, y) {
    const heart = document.createElement('div');
    heart.innerHTML = 'üíñ';
    heart.style.position = 'fixed';
    heart.style.left = x + 'px';
    heart.style.top = y + 'px';
    heart.style.fontSize = '1rem';
    heart.style.pointerEvents = 'none';
    heart.style.zIndex = '1000';
    heart.style.animation = 'float 2s ease-out forwards';
    
    document.body.appendChild(heart);
    
    setTimeout(() => {
        heart.remove();
    }, 2000);
}

// Add keyboard shortcuts
document.addEventListener('keydown', function(e) {
    // ESC to close modals
    if (e.key === 'Escape') {
        closeConfirmationModal();
        closeDetailModal();
    }
    
    // Enter to submit form (if not in modal)
    if (e.key === 'Enter' && !confirmationModal.style.display === 'block') {
        if (e.target.tagName !== 'TEXTAREA') {
            e.preventDefault();
            form.dispatchEvent(new Event('submit'));
        }
    }
});

// Add some romantic background effects
function createRomanticEffects() {
    // Create floating particles
    setInterval(() => {
        if (Math.random() < 0.3) {
            createFloatingParticle();
        }
    }, 2000);
}

function createFloatingParticle() {
    const particle = document.createElement('div');
    particle.innerHTML = ['üíï', 'üíñ', 'üíó', 'üíù', 'üíò'][Math.floor(Math.random() * 5)];
    particle.style.position = 'fixed';
    particle.style.left = Math.random() * window.innerWidth + 'px';
    particle.style.top = '100vh';
    particle.style.fontSize = '1.5rem';
    particle.style.pointerEvents = 'none';
    particle.style.zIndex = '1';
    particle.style.animation = 'floatUp 4s linear forwards';
    
    document.body.appendChild(particle);
    
    setTimeout(() => {
        particle.remove();
    }, 4000);
}

// Add CSS for floatUp animation
const floatUpStyle = document.createElement('style');
floatUpStyle.textContent = `
    @keyframes floatUp {
        from {
            transform: translateY(0) rotate(0deg);
            opacity: 1;
        }
        to {
            transform: translateY(-100vh) rotate(360deg);
            opacity: 0;
        }
    }
`;
document.head.appendChild(floatUpStyle);

// Refresh data function
async function refreshData() {
    const refreshBtn = document.getElementById('refreshBtn');
    const icon = refreshBtn.querySelector('i');
    
    // Show loading animation
    icon.style.animation = 'spin 1s linear infinite';
    refreshBtn.disabled = true;
    
    try {
        await loadDrinkingRecords();
        showNotification('üîÑ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!', 'success');
    } catch (error) {
        showNotification('‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu', 'error');
    } finally {
        // Reset button
        icon.style.animation = '';
        refreshBtn.disabled = false;
    }
}

// Auto refresh every 30 seconds
setInterval(refreshData, 30000);

// Game functions
function openGame(gameType) {
    const gameModal = document.getElementById('gameModal');
    const gameTitle = document.getElementById('gameTitle');
    const gameContent = document.getElementById('gameContent');
    
    gameModal.style.display = 'block';
    
    switch(gameType) {
        case 'love-test':
            gameTitle.textContent = 'üíï Test T√¨nh Y√™u üíï';
            gameContent.innerHTML = `
                <div class="love-test">
                    <h4>Ki·ªÉm tra m·ª©c ƒë·ªô y√™u th∆∞∆°ng c·ªßa b·∫°n!</h4>
                    <div class="test-question">
                        <p>B·∫°n c√≥ y√™u V√µ Th·ªã Ng·ªçc Mu·ªôi kh√¥ng?</p>
                        <div class="test-buttons">
                            <button onclick="loveTestResult(true)" class="love-yes">üíñ C√≥, r·∫•t y√™u!</button>
                            <button onclick="loveTestResult(false)" class="love-no">üíî Kh√¥ng</button>
                        </div>
                    </div>
                </div>
            `;
            break;
            
        case 'memory-game':
            gameTitle.textContent = 'üß† Tr√≤ Ch∆°i Tr√≠ Nh·ªõ üß†';
            gameContent.innerHTML = `
                <div class="memory-game">
                    <h4>Gh√©p ƒë√¥i c√°c h√¨nh ·∫£nh!</h4>
                    <div class="memory-grid">
                        <div class="memory-card" onclick="flipCard(0)">?</div>
                        <div class="memory-card" onclick="flipCard(1)">?</div>
                        <div class="memory-card" onclick="flipCard(2)">?</div>
                        <div class="memory-card" onclick="flipCard(3)">?</div>
                    </div>
                    <p>Score: <span id="memoryScore">0</span></p>
                </div>
            `;
            break;
            
        case 'love-letter':
            gameTitle.textContent = 'üíå Vi·∫øt Th∆∞ T√¨nh üíå';
            gameContent.innerHTML = `
                <div class="love-letter">
                    <h4>Th∆∞ t√¨nh ng·∫´u nhi√™n cho V√µ Th·ªã Ng·ªçc Mu·ªôi:</h4>
                    <div class="letter-content">
                        <p id="letterText">ƒêang t·∫°o th∆∞ t√¨nh...</p>
                        <button onclick="generateLoveLetter()" class="generate-btn">T·∫°o th∆∞ m·ªõi</button>
                    </div>
                </div>
            `;
            generateLoveLetter();
            break;
            
        case 'fortune-teller':
            gameTitle.textContent = 'üîÆ B√≥i T√¨nh Duy√™n üîÆ';
            gameContent.innerHTML = `
                <div class="fortune-teller">
                    <h4>Xem v·∫≠n may t√¨nh c·∫£m c·ªßa b·∫°n!</h4>
                    <div class="fortune-content">
                        <div class="crystal-ball" onclick="tellFortune()">
                            <div class="ball">üîÆ</div>
                            <p>Nh·∫•n v√†o ƒë·ªÉ xem b√≥i</p>
                        </div>
                        <div id="fortuneResult"></div>
                    </div>
                </div>
            `;
            break;
            
        case 'love-quiz':
            gameTitle.textContent = 'üß© Quiz T√¨nh Y√™u üß©';
            gameContent.innerHTML = `
                <div class="love-quiz">
                    <h4>Ki·ªÉm tra hi·ªÉu bi·∫øt v·ªÅ t√¨nh y√™u!</h4>
                    <div id="quizContent">
                        <div class="quiz-question">
                            <p id="questionText">C√¢u h·ªèi 1: T√¨nh y√™u ƒë√≠ch th·ª±c l√† g√¨?</p>
                            <div class="quiz-options">
                                <button onclick="answerQuiz(1)" class="quiz-option">A. Ch·ªâ l√† c·∫£m x√∫c nh·∫•t th·ªùi</button>
                                <button onclick="answerQuiz(2)" class="quiz-option">B. S·ª± hy sinh v√† quan t√¢m l·∫´n nhau</button>
                                <button onclick="answerQuiz(3)" class="quiz-option">C. S·ª± h·∫•p d·∫´n v·ªÅ th·ªÉ x√°c</button>
                                <button onclick="answerQuiz(4)" class="quiz-option">D. Ch·ªâ l√† s·ª± t∆∞∆°ng h·ª£p</button>
                            </div>
                        </div>
                        <div class="quiz-score">
                            <p>ƒêi·ªÉm: <span id="quizScore">0</span>/5</p>
                        </div>
                    </div>
                </div>
            `;
            initQuiz();
            break;
            
        case 'heart-calculator':
            gameTitle.textContent = 'üíØ M√°y T√≠nh T√¨nh Y√™u üíØ';
            gameContent.innerHTML = `
                <div class="heart-calculator">
                    <h4>T√≠nh ƒë·ªô t∆∞∆°ng h·ª£p t√¨nh y√™u!</h4>
                    <div class="calculator-form">
                        <div class="form-group">
                            <label>T√™n c·ªßa b·∫°n:</label>
                            <input type="text" id="yourName" placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n">
                        </div>
                        <div class="form-group">
                            <label>T√™n ng∆∞·ªùi y√™u:</label>
                            <input type="text" id="loverName" placeholder="Nh·∫≠p t√™n ng∆∞·ªùi y√™u">
                        </div>
                        <button onclick="calculateLove()" class="calculate-btn">T√≠nh T√¨nh Y√™u</button>
                    </div>
                    <div id="loveResult" class="love-result"></div>
                </div>
            `;
            break;
            
        case 'love-story':
            gameTitle.textContent = 'üìñ C√¢u Chuy·ªán T√¨nh Y√™u üìñ';
            gameContent.innerHTML = `
                <div class="love-story">
                    <h4>T·∫°o c√¢u chuy·ªán t√¨nh y√™u ng·∫´u nhi√™n!</h4>
                    <div class="story-content">
                        <p id="storyText">ƒêang t·∫°o c√¢u chuy·ªán...</p>
                        <button onclick="generateStory()" class="generate-story-btn">T·∫°o c√¢u chuy·ªán m·ªõi</button>
                    </div>
                </div>
            `;
            generateStory();
            break;
            
        case 'couple-challenge':
            gameTitle.textContent = 'üèÜ Th·ª≠ Th√°ch C·∫∑p ƒê√¥i üèÜ';
            gameContent.innerHTML = `
                <div class="couple-challenge">
                    <h4>Th·ª≠ th√°ch t√¨nh y√™u d√†nh cho c·∫∑p ƒë√¥i!</h4>
                    <div class="challenge-content">
                        <div class="challenge-card" onclick="getChallenge()">
                            <div class="challenge-icon">üíï</div>
                            <p>Nh·∫•n ƒë·ªÉ nh·∫≠n th·ª≠ th√°ch</p>
                        </div>
                        <div id="challengeResult" class="challenge-result"></div>
                    </div>
                </div>
            `;
            break;
            
        case 'love-music':
            gameTitle.textContent = 'üéµ Nh·∫°c T√¨nh Y√™u üéµ';
            gameContent.innerHTML = `
                <div class="love-music">
                    <h4>G·ª£i √Ω b√†i h√°t l√£ng m·∫°n!</h4>
                    <div class="music-content">
                        <div class="music-card">
                            <div class="music-info">
                                <h5 id="songTitle">ƒêang t√¨m b√†i h√°t...</h5>
                                <p id="songArtist">Ngh·ªá sƒ©</p>
                            </div>
                            <button onclick="getLoveSong()" class="music-btn">üéµ B√†i h√°t m·ªõi</button>
                        </div>
                    </div>
                </div>
            `;
            getLoveSong();
            break;
            
        case 'date-ideas':
            gameTitle.textContent = 'üí° √ù T∆∞·ªüng H·∫πn H√≤ üí°';
            gameContent.innerHTML = `
                <div class="date-ideas">
                    <h4>G·ª£i √Ω ho·∫°t ƒë·ªông h·∫πn h√≤ l√£ng m·∫°n!</h4>
                    <div class="ideas-content">
                        <div class="idea-card">
                            <h5 id="ideaTitle">ƒêang t√¨m √Ω t∆∞·ªüng...</h5>
                            <p id="ideaDescription">M√¥ t·∫£ ho·∫°t ƒë·ªông</p>
                            <p id="ideaLocation">ƒê·ªãa ƒëi·ªÉm</p>
                        </div>
                        <button onclick="getDateIdea()" class="idea-btn">üí° √ù t∆∞·ªüng m·ªõi</button>
                    </div>
                </div>
            `;
            getDateIdea();
            break;
            
        case 'love-calendar':
            gameTitle.textContent = 'üìÖ L·ªãch T√¨nh Y√™u üìÖ';
            gameContent.innerHTML = `
                <div class="love-calendar">
                    <h4>Ng√†y k·ª∑ ni·ªám ƒë·∫∑c bi·ªát trong t√¨nh y√™u!</h4>
                    <div class="calendar-content">
                        <div class="special-dates">
                            <h5>Nh·ªØng ng√†y ƒë·∫∑c bi·ªát:</h5>
                            <ul id="specialDatesList">
                                <li>üíï Ng√†y Valentine (14/2)</li>
                                <li>üåπ Ng√†y Ph·ª• n·ªØ Vi·ªát Nam (20/10)</li>
                                <li>üíù Ng√†y Qu·ªëc t·∫ø Ph·ª• n·ªØ (8/3)</li>
                                <li>üíê Ng√†y c·ªßa M·∫π</li>
                                <li>üéÇ Ng√†y sinh nh·∫≠t ƒë·∫∑c bi·ªát</li>
                            </ul>
                        </div>
                        <div class="anniversary-calculator">
                            <h5>T√≠nh ng√†y k·ª∑ ni·ªám:</h5>
                            <input type="date" id="anniversaryDate" placeholder="Ng√†y b·∫Øt ƒë·∫ßu y√™u">
                            <button onclick="calculateAnniversary()" class="anniversary-btn">T√≠nh k·ª∑ ni·ªám</button>
                            <div id="anniversaryResult"></div>
                        </div>
                    </div>
                </div>
            `;
            break;
    }
}

function closeGameModal() {
    document.getElementById('gameModal').style.display = 'none';
}

function loveTestResult(isLove) {
    const result = isLove ? 
        'üíñ Tuy·ªát v·ªùi! B·∫°n ƒë√£ v∆∞·ª£t qua b√†i test t√¨nh y√™u! üíñ' : 
        'üíî Th·∫•t b·∫°i! B·∫°n c·∫ßn y√™u th∆∞∆°ng nhi·ªÅu h∆°n! üíî';
    
    document.querySelector('.love-test').innerHTML = `
        <h4>K·∫øt qu·∫£:</h4>
        <p>${result}</p>
        <button onclick="openGame('love-test')" class="retry-btn">Th·ª≠ l·∫°i</button>
    `;
}

function generateLoveLetter() {
    const letters = [
        "üíï Em y√™u ∆°i, anh mu·ªën n√≥i v·ªõi em r·∫±ng em l√† tia n·∫Øng ·∫•m √°p nh·∫•t trong cu·ªôc ƒë·ªùi anh...",
        "üíñ Mu·ªôi √†, m·ªói ng√†y anh th·ª©c d·∫≠y, ƒëi·ªÅu ƒë·∫ßu ti√™n anh nghƒ© ƒë·∫øn l√† em...",
        "üíù Anh y√™u em kh√¥ng ch·ªâ v√¨ em l√† em, m√† c√≤n v√¨ c√°ch em l√†m anh tr·ªü th√†nh phi√™n b·∫£n t·ªët nh·∫•t c·ªßa ch√≠nh m√¨nh...",
        "üíó Em nh∆∞ m·ªôt ng√¥i sao s√°ng trong ƒë√™m t·ªëi, d·∫´n l·ªëi cho anh ƒëi...",
        "üíò T√¨nh y√™u anh d√†nh cho em kh√¥ng c√≥ t·ª´ ng·ªØ n√†o c√≥ th·ªÉ di·ªÖn t·∫£ h·∫øt ƒë∆∞·ª£c..."
    ];
    
    const randomLetter = letters[Math.floor(Math.random() * letters.length)];
    document.getElementById('letterText').textContent = randomLetter;
}

function tellFortune() {
    const fortunes = [
        "üåü T√¨nh y√™u c·ªßa b·∫°n s·∫Ω n·ªü hoa r·ª±c r·ª°!",
        "üíï B·∫°n s·∫Ω g·∫∑p ƒë∆∞·ª£c may m·∫Øn trong t√¨nh c·∫£m!",
        "üíñ M·ªëi quan h·ªá hi·ªán t·∫°i s·∫Ω ph√°t tri·ªÉn t·ªët ƒë·∫πp!",
        "üíù H√£y m·ªü l√≤ng v√† tin t∆∞·ªüng v√†o t√¨nh y√™u!",
        "üíó Th·ªùi gian t·ªõi s·∫Ω c√≥ nhi·ªÅu ƒëi·ªÅu ng·ªçt ng√†o ch·ªù ƒë√≥n!"
    ];
    
    const randomFortune = fortunes[Math.floor(Math.random() * fortunes.length)];
    document.getElementById('fortuneResult').innerHTML = `
        <div class="fortune-text">${randomFortune}</div>
        <button onclick="tellFortune()" class="retry-btn">B√≥i l·∫°i</button>
    `;
}

// Admin functions
function openAdmin() {
    document.getElementById('adminModal').style.display = 'block';
    updateAdminStats();
    loadAdminRecords();
}

function closeAdminModal() {
    document.getElementById('adminModal').style.display = 'none';
}

function switchAdminTab(tabName) {
    document.querySelectorAll('.admin-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelector(`[onclick="switchAdminTab('${tabName}')"]`).classList.add('active');
    
    document.querySelectorAll('.admin-tab-content').forEach(content => {
        content.classList.remove('active');
    });
    document.getElementById(`${tabName}Tab`).classList.add('active');
    
    currentAdminTab = tabName;
    
    if (tabName === 'stats') {
        updateAdminStats();
    } else if (tabName === 'manage') {
        loadAdminRecords();
    }
}

function updateAdminStats() {
    const stats = {
        total: allRecords.length,
        drinking: allRecords.filter(r => r.type === 'drinking').length,
        eating: allRecords.filter(r => r.type === 'eating').length,
        shopping: allRecords.filter(r => r.type === 'shopping').length,
        travel: allRecords.filter(r => r.type === 'travel').length,
        hanging: allRecords.filter(r => r.type === 'hanging').length,
        work: allRecords.filter(r => r.type === 'work').length,
        study: allRecords.filter(r => r.type === 'study').length,
        sports: allRecords.filter(r => r.type === 'sports').length,
        health: allRecords.filter(r => r.type === 'health').length,
        family: allRecords.filter(r => r.type === 'family').length,
        other: allRecords.filter(r => r.type === 'other').length,
        confirmations: allRecords.filter(r => r.type === 'confirmation_attempt').length,
        stayHome: allRecords.filter(r => r.type === 'stay_home_decision').length,
        apologiesAccepted: allRecords.filter(r => r.type === 'apology_accepted').length,
        apologiesRejected: allRecords.filter(r => r.type === 'apology_rejected').length
    };
    
    document.getElementById('totalRequests').textContent = stats.total;
    document.getElementById('drinkingCount').textContent = stats.drinking;
    document.getElementById('eatingCount').textContent = stats.eating;
    document.getElementById('shoppingCount').textContent = stats.shopping;
    
    // Add more stats if elements exist
    if (document.getElementById('studyCount')) {
        document.getElementById('studyCount').textContent = stats.study;
    }
    if (document.getElementById('sportsCount')) {
        document.getElementById('sportsCount').textContent = stats.sports;
    }
    if (document.getElementById('confirmationsCount')) {
        document.getElementById('confirmationsCount').textContent = stats.confirmations;
    }
    if (document.getElementById('stayHomeCount')) {
        document.getElementById('stayHomeCount').textContent = stats.stayHome;
    }
    if (document.getElementById('apologiesAcceptedCount')) {
        document.getElementById('apologiesAcceptedCount').textContent = stats.apologiesAccepted;
    }
    if (document.getElementById('apologiesRejectedCount')) {
        document.getElementById('apologiesRejectedCount').textContent = stats.apologiesRejected;
    }
}

function loadAdminRecords() {
    const adminRecordList = document.getElementById('adminRecordList');
    
    if (allRecords.length === 0) {
        adminRecordList.innerHTML = '<p>Ch∆∞a c√≥ ƒë∆°n xin ph√©p n√†o.</p>';
        return;
    }
    
    adminRecordList.innerHTML = allRecords.map(record => {
        // Get display title based on record type
        let title = 'Ho·∫°t ƒë·ªông';
        if (record.type === 'confirmation_attempt') {
            title = `L·∫ßn x√°c nh·∫≠n th·ª© ${record.attempt}`;
        } else if (record.type === 'stay_home_decision') {
            title = 'Quy·∫øt ƒë·ªãnh ·ªü nh√†';
        } else if (record.type === 'apology_accepted') {
            title = `Xin l·ªói: ${record.apologyReason}`;
        } else if (record.type === 'apology_rejected') {
            title = `Xin l·ªói: ${record.apologyReason}`;
        } else {
            title = record.type === 'drinking' ? record.drinkingWith : 
                   record.type === 'eating' ? record.eatingWith :
                   record.type === 'shopping' ? record.shoppingWith :
                   record.type === 'travel' ? record.travelDestination :
                   record.type === 'hanging' ? record.hangingWith :
                   record.type === 'work' ? record.workType :
                   record.type === 'study' ? record.studySubject :
                   record.type === 'sports' ? record.sportType :
                   record.type === 'health' ? record.healthType :
                   record.type === 'family' ? record.familyType :
                   record.type === 'other' ? record.otherType : 'Ho·∫°t ƒë·ªông';
        }
        
        const icons = {
            drinking: 'üçª',
            eating: 'üçΩÔ∏è',
            shopping: 'üõçÔ∏è',
            travel: '‚úàÔ∏è',
            hanging: 'üéÆ',
            work: 'üíº',
            study: 'üéì',
            sports: 'üèÉ‚Äç‚ôÇÔ∏è',
            health: 'üè•',
            family: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
            other: 'üìù',
            confirmation_attempt: 'üíî',
            stay_home_decision: 'üíï',
            apology_accepted: 'üíï',
            apology_rejected: 'üíî'
        };
        
        const icon = icons[record.type] || 'üìã';
        
        return `
            <div class="admin-record-item">
                <div class="admin-record-info">
                    <h6>${icon} ${title}</h6>
                    <p><strong>Lo·∫°i:</strong> ${getTypeDisplayName(record.type)}</p>
                    <p><strong>ID:</strong> ${record.id}</p>
                    <p><strong>Th·ªùi gian:</strong> ${record.startTime || record.travelStartDate || record.studyStartTime || record.sportStartTime || record.healthStartTime || record.familyStartTime || record.otherStartTime || 'N/A'} - ${record.endTime || record.travelEndDate || record.studyEndTime || record.sportEndTime || record.healthEndTime || record.familyEndTime || record.otherEndTime || 'N/A'}</p>
                    <p><strong>Ng√†y t·∫°o:</strong> ${record.createdAt || record.timestamp}</p>
                    ${record.type === 'confirmation_attempt' || record.type === 'stay_home_decision' ? 
                        `<p><strong>H√†nh ƒë·ªông:</strong> ${record.action === 'confirm' ? 'X√°c nh·∫≠n' : '·ªû nh√†'}</p>` : 
                        ''
                    }
                </div>
                <div class="admin-record-actions">
                    <button onclick="showDetail(${record.id})" class="view-btn">Xem chi ti·∫øt</button>
                    <button onclick="deleteRecord(${record.id})" class="delete-btn">X√≥a</button>
                </div>
            </div>
        `;
    }).join('');
}

function deleteRecord(id) {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë∆°n n√†y?')) {
        allRecords = allRecords.filter(r => r.id !== id);
        saveAllRecords();
        loadAdminRecords();
        renderDrinkingList();
        showNotification('ƒê√£ x√≥a ƒë∆°n xin ph√©p!', 'success');
    }
}

async function saveAllRecords() {
    try {
        const response = await fetch(JSONBIN_UPDATE_URL, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'X-Master-Key': JSONBIN_API_KEY
            },
            body: JSON.stringify(allRecords)
        });
        
        if (response.ok) {
            console.log('D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o JSONBin');
            // Auto update UI after successful save
            renderDrinkingList();
            updateAdminStats();
        } else {
            throw new Error('L·ªói khi l∆∞u v√†o JSONBin');
        }
    } catch (error) {
        console.log('L∆∞u v√†o localStorage l√†m backup');
        localStorage.setItem('allRecords', JSON.stringify(allRecords));
        // Still update UI even if JSONBin fails
        renderDrinkingList();
        updateAdminStats();
    }
}

function exportData() {
    const dataStr = JSON.stringify(allRecords, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `permission-requests-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    showNotification('ƒê√£ xu·∫•t d·ªØ li·ªáu!', 'success');
}

function clearAllData() {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a T·∫§T C·∫¢ d·ªØ li·ªáu? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!')) {
        allRecords = [];
        saveAllRecords();
        renderDrinkingList();
        updateAdminStats();
        loadAdminRecords();
        showNotification('ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu!', 'warning');
    }
}

function backupData() {
    localStorage.setItem('backup_' + Date.now(), JSON.stringify(allRecords));
    showNotification('ƒê√£ backup d·ªØ li·ªáu!', 'success');
}

// New game functions
let quizScore = 0;
let currentQuestion = 0;

function initQuiz() {
    quizScore = 0;
    currentQuestion = 0;
    updateQuizQuestion();
}

function updateQuizQuestion() {
    const questions = [
        {
            question: "T√¨nh y√™u ƒë√≠ch th·ª±c l√† g√¨?",
            options: [
                "Ch·ªâ l√† c·∫£m x√∫c nh·∫•t th·ªùi",
                "S·ª± hy sinh v√† quan t√¢m l·∫´n nhau",
                "S·ª± h·∫•p d·∫´n v·ªÅ th·ªÉ x√°c",
                "Ch·ªâ l√† s·ª± t∆∞∆°ng h·ª£p"
            ],
            correct: 2
        },
        {
            question: "ƒêi·ªÅu quan tr·ªçng nh·∫•t trong t√¨nh y√™u l√† g√¨?",
            options: [
                "Ngo·∫°i h√¨nh",
                "Ti·ªÅn b·∫°c",
                "S·ª± tin t∆∞·ªüng",
                "S·ªü th√≠ch chung"
            ],
            correct: 3
        },
        {
            question: "Khi y√™u, b·∫°n n√™n l√†m g√¨ khi c√≥ xung ƒë·ªôt?",
            options: [
                "Im l·∫∑ng v√† tr√°nh n√©",
                "Tranh c√£i ƒë·∫øn c√πng",
                "L·∫Øng nghe v√† th·∫£o lu·∫≠n",
                "ƒê·ªï l·ªói cho ƒë·ªëi ph∆∞∆°ng"
            ],
            correct: 3
        },
        {
            question: "T√¨nh y√™u b·ªÅn v·ªØng c·∫ßn g√¨?",
            options: [
                "Ch·ªâ c·∫ßn c·∫£m x√∫c",
                "S·ª± ki√™n nh·∫´n v√† n·ªó l·ª±c",
                "May m·∫Øn",
                "S·ª± ho√†n h·∫£o"
            ],
            correct: 2
        },
        {
            question: "C√°ch th·ªÉ hi·ªán t√¨nh y√™u t·ªët nh·∫•t l√† g√¨?",
            options: [
                "Qu√† c√°p ƒë·∫Øt ti·ªÅn",
                "L·ªùi n√≥i ng·ªçt ng√†o",
                "H√†nh ƒë·ªông quan t√¢m h√†ng ng√†y",
                "Khoe khoang tr√™n m·∫°ng x√£ h·ªôi"
            ],
            correct: 3
        }
    ];

    if (currentQuestion < questions.length) {
        const q = questions[currentQuestion];
        document.getElementById('questionText').textContent = `C√¢u ${currentQuestion + 1}: ${q.question}`;
        
        const options = document.querySelectorAll('.quiz-option');
        options.forEach((option, index) => {
            option.textContent = `${String.fromCharCode(65 + index)}. ${q.options[index]}`;
        });
    } else {
        showQuizResult();
    }
}

function answerQuiz(selectedAnswer) {
    const questions = [
        { correct: 2 }, { correct: 3 }, { correct: 3 }, { correct: 2 }, { correct: 3 }
    ];
    
    if (selectedAnswer === questions[currentQuestion].correct) {
        quizScore++;
        showNotification('Ch√≠nh x√°c! üíñ', 'success');
    } else {
        showNotification('Sai r·ªìi! üíî', 'error');
    }
    
    currentQuestion++;
    setTimeout(updateQuizQuestion, 1000);
}

function showQuizResult() {
    const result = quizScore >= 4 ? 'Xu·∫•t s·∫Øc! üíñ' : 
                   quizScore >= 3 ? 'T·ªët! üíï' : 
                   quizScore >= 2 ? 'Kh√°! üíó' : 'C·∫ßn c·ªë g·∫Øng h∆°n! üíî';
    
    document.getElementById('quizContent').innerHTML = `
        <div class="quiz-result">
            <h4>K·∫øt qu·∫£ Quiz T√¨nh Y√™u</h4>
            <div class="result-score">
                <p>ƒêi·ªÉm s·ªë: <span style="font-size: 2rem; color: #e91e63;">${quizScore}/5</span></p>
                <p>${result}</p>
            </div>
            <button onclick="initQuiz()" class="retry-btn">L√†m l·∫°i</button>
        </div>
    `;
}

function calculateLove() {
    const yourName = document.getElementById('yourName').value;
    const loverName = document.getElementById('loverName').value;
    
    if (!yourName || !loverName) {
        showNotification('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n!', 'error');
        return;
    }
    
    // Simple love calculation based on name length and characters
    const score = Math.abs((yourName.length * loverName.length) % 100) + 1;
    
    const result = document.getElementById('loveResult');
    result.innerHTML = `
        <div class="love-score">
            <h3>üíï K·∫øt qu·∫£ t√≠nh to√°n t√¨nh y√™u üíï</h3>
            <div class="score-circle">
                <span class="score-number">${score}%</span>
                <p>T∆∞∆°ng h·ª£p</p>
            </div>
            <div class="love-message">
                ${getLoveMessage(score)}
            </div>
        </div>
    `;
}

function getLoveMessage(score) {
    if (score >= 90) return "üíñ T√¨nh y√™u ho√†n h·∫£o! C·∫∑p ƒë√¥i l√Ω t∆∞·ªüng!";
    if (score >= 80) return "üíï T√¨nh y√™u r·∫•t m·∫°nh m·∫Ω! H√£y tr√¢n tr·ªçng nhau!";
    if (score >= 70) return "üíó T√¨nh y√™u t·ªët ƒë·∫πp! C·∫ßn n·ªó l·ª±c th√™m!";
    if (score >= 60) return "üíù T√¨nh y√™u kh√° ·ªïn! C·ªë g·∫Øng hi·ªÉu nhau h∆°n!";
    if (score >= 50) return "üíò T√¨nh y√™u trung b√¨nh! C·∫ßn nhi·ªÅu th·ªùi gian!";
    return "üíî C·∫ßn n·ªó l·ª±c nhi·ªÅu h∆°n ƒë·ªÉ hi·ªÉu nhau!";
}

function generateStory() {
    const stories = [
        "M·ªôt ng√†y n·ªç, c√≥ hai tr√°i tim g·∫∑p nhau trong m·ªôt qu√°n c√† ph√™ nh·ªè. T·ª´ √°nh m·∫Øt ƒë·∫ßu ti√™n, h·ªç bi·∫øt r·∫±ng ƒë√¢y ch√≠nh l√† ƒë·ªãnh m·ªánh. T√¨nh y√™u c·ªßa h·ªç n·ªü hoa nh∆∞ nh·ªØng b√¥ng h·ªìng trong v∆∞·ªùn, ƒë·∫πp ƒë·∫Ω v√† th∆°m ng√°t.",
        "Trong m·ªôt bu·ªïi chi·ªÅu m∆∞a, anh ƒë√£ chia s·∫ª chi·∫øc √¥ v·ªõi c√¥ g√°i l·∫°. T·ª´ kho·∫£nh kh·∫Øc ƒë√≥, h·ªç b·∫Øt ƒë·∫ßu m·ªôt c√¢u chuy·ªán t√¨nh y√™u ƒë·∫πp nh∆∞ c·ªï t√≠ch. M·ªói ng√†y c√πng nhau tr·ªü th√†nh m·ªôt trang m·ªõi trong cu·ªën s√°ch h·∫°nh ph√∫c.",
        "Hai ng∆∞·ªùi b·∫°n th√¢n t·ª´ nh·ªè, qua nhi·ªÅu nƒÉm th√°ng, t√¨nh b·∫°n ƒë√£ chuy·ªÉn th√†nh t√¨nh y√™u. H·ªç hi·ªÉu nhau h∆°n ai h·∫øt, y√™u th∆∞∆°ng nhau b·∫±ng c·∫£ tr√°i tim v√† t√¢m h·ªìn.",
        "Trong m·ªôt chuy·∫øn du l·ªãch, h·ªç g·∫∑p nhau t√¨nh c·ªù. T·ª´ nh·ªØng cu·ªôc tr√≤ chuy·ªán ng·∫Øn ng·ªßi, h·ªç nh·∫≠n ra s·ª± t∆∞∆°ng h·ª£p k·ª≥ l·∫°. T√¨nh y√™u n·∫£y n·ªü nh∆∞ hoa n·ªü trong m√πa xu√¢n.",
        "C√¥ g√°i ƒë√£ c·ª©u ch√∫ ch√≥ c·ªßa anh trong m·ªôt ng√†y m∆∞a. T·ª´ h√†nh ƒë·ªông nh√¢n √°i ƒë√≥, t√¨nh y√™u ƒë√£ n·∫£y n·ªü. H·ªç y√™u nhau kh√¥ng ch·ªâ v√¨ v·∫ª ngo√†i m√† c√≤n v√¨ t·∫•m l√≤ng nh√¢n h·∫≠u."
    ];
    
    const randomStory = stories[Math.floor(Math.random() * stories.length)];
    document.getElementById('storyText').textContent = randomStory;
}

function getChallenge() {
    const challenges = [
        "üíï H√£y khen ng∆∞·ªùi y√™u 3 ƒëi·ªÅu m√† b·∫°n th√≠ch nh·∫•t v·ªÅ h·ªç",
        "üíñ Vi·∫øt m·ªôt l√° th∆∞ t√¨nh b·∫±ng tay v√† g·ª≠i cho ng∆∞·ªùi y√™u",
        "üíó N·∫•u m·ªôt b·ªØa ƒÉn ngon cho ng∆∞·ªùi y√™u",
        "üíù T·∫°o m·ªôt playlist nh·∫°c y√™u th∆∞∆°ng v√† chia s·∫ª",
        "üíò D√†nh m·ªôt ng√†y ho√†n to√†n cho ng∆∞·ªùi y√™u, kh√¥ng ƒëi·ªán tho·∫°i",
        "üíï Ch·ª•p ·∫£nh c√πng nhau v√† in ra l√†m k·ª∑ ni·ªám",
        "üíñ H·ªçc m·ªôt b√†i h√°t t√¨nh y√™u ƒë·ªÉ h√°t cho ng∆∞·ªùi y√™u nghe",
        "üíó Vi·∫øt nh·∫≠t k√Ω v·ªÅ nh·ªØng kho·∫£nh kh·∫Øc h·∫°nh ph√∫c c√πng nhau",
        "üíù T·∫°o m·ªôt video compilation v·ªÅ nh·ªØng k·ª∑ ni·ªám ƒë·∫πp",
        "üíò Th·ª±c hi·ªán m·ªôt ƒëi·ªÅu m√† ng∆∞·ªùi y√™u t·ª´ng mong ∆∞·ªõc"
    ];
    
    const randomChallenge = challenges[Math.floor(Math.random() * challenges.length)];
    document.getElementById('challengeResult').innerHTML = `
        <div class="challenge-text">${randomChallenge}</div>
        <button onclick="getChallenge()" class="retry-btn">Th·ª≠ th√°ch m·ªõi</button>
    `;
}

function getLoveSong() {
    const songs = [
        { title: "Anh ∆†i ·ªû L·∫°i", artist: "Chi Pu" },
        { title: "Ch√∫ng Ta C·ªßa Hi·ªán T·∫°i", artist: "S∆°n T√πng M-TP" },
        { title: "Em G√¨ ∆†i", artist: "Jack & K-ICM" },
        { title: "N∆°i N√†y C√≥ Anh", artist: "S∆°n T√πng M-TP" },
        { title: "Y√™u ƒê∆∞∆°ng Kh√≥ Qu√°", artist: "Lou Ho√†ng" },
        { title: "Ch·∫°y Ngay ƒêi", artist: "S∆°n T√πng M-TP" },
        { title: "Em ∆†i", artist: "Karik ft. Orange" },
        { title: "B∆∞·ªõc Qua M√πa C√¥ ƒê∆°n", artist: "V≈©" },
        { title: "S√≥ng Gi√≥", artist: "Jack & K-ICM" },
        { title: "ƒê·ª´ng Nh∆∞ Th√≥i Quen", artist: "Jaykii" }
    ];
    
    const randomSong = songs[Math.floor(Math.random() * songs.length)];
    document.getElementById('songTitle').textContent = randomSong.title;
    document.getElementById('songArtist').textContent = randomSong.artist;
}

function getDateIdea() {
    const ideas = [
        {
            title: "H·∫πn h√≤ t·∫°i qu√°n c√† ph√™ s√°ch",
            description: "C√πng nhau ƒë·ªçc s√°ch, th∆∞·ªüng th·ª©c c√† ph√™ v√† tr√≤ chuy·ªán v·ªÅ nh·ªØng cu·ªën s√°ch y√™u th√≠ch",
            location: "Qu√°n c√† ph√™ s√°ch, th∆∞ vi·ªán, ho·∫∑c qu√°n c√† ph√™ y√™n tƒ©nh"
        },
        {
            title: "D·∫°o ph·ªë v√†o bu·ªïi t·ªëi",
            description: "ƒêi b·ªô c√πng nhau tr√™n nh·ªØng con ph·ªë ƒë·∫πp, ng·∫Øm c·∫£nh v√† chia s·∫ª nh·ªØng c√¢u chuy·ªán",
            location: "Ph·ªë c·ªï, khu ph·ªë ƒëi b·ªô, ho·∫∑c b·ªù h·ªì"
        },
        {
            title: "Xem phim t·∫°i nh√†",
            description: "Ch·ªçn m·ªôt b·ªô phim l√£ng m·∫°n, chu·∫©n b·ªã b·ªèng ng√¥ v√† c√πng nhau th∆∞·ªüng th·ª©c",
            location: "Nh√† c·ªßa m·ªôt trong hai ng∆∞·ªùi"
        },
        {
            title: "Cooking date",
            description: "C√πng nhau n·∫•u ƒÉn, th·ª≠ nh·ªØng m√≥n m·ªõi v√† t·∫≠n h∆∞·ªüng th·ªùi gian b√™n nhau",
            location: "Nh√† b·∫øp ho·∫∑c l·ªõp h·ªçc n·∫•u ƒÉn"
        },
        {
            title: "Picnic trong c√¥ng vi√™n",
            description: "Chu·∫©n b·ªã ƒë·ªì ƒÉn v√† c√πng nhau d√£ ngo·∫°i trong c√¥ng vi√™n, ng·∫Øm thi√™n nhi√™n",
            location: "C√¥ng vi√™n, v∆∞·ªùn hoa, ho·∫∑c b√£i bi·ªÉn"
        }
    ];
    
    const randomIdea = ideas[Math.floor(Math.random() * ideas.length)];
    document.getElementById('ideaTitle').textContent = randomIdea.title;
    document.getElementById('ideaDescription').textContent = randomIdea.description;
    document.getElementById('ideaLocation').textContent = `üìç ${randomIdea.location}`;
}

function calculateAnniversary() {
    const anniversaryDate = document.getElementById('anniversaryDate').value;
    
    if (!anniversaryDate) {
        showNotification('Vui l√≤ng ch·ªçn ng√†y k·ª∑ ni·ªám!', 'error');
        return;
    }
    
    const startDate = new Date(anniversaryDate);
    const today = new Date();
    const diffTime = Math.abs(today - startDate);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    const years = Math.floor(diffDays / 365);
    const months = Math.floor((diffDays % 365) / 30);
    const days = diffDays % 30;
    
    document.getElementById('anniversaryResult').innerHTML = `
        <div class="anniversary-result">
            <h5>üíï Th·ªùi gian y√™u nhau üíï</h5>
            <div class="time-display">
                <p><strong>${years}</strong> nƒÉm</p>
                <p><strong>${months}</strong> th√°ng</p>
                <p><strong>${days}</strong> ng√†y</p>
            </div>
            <p class="total-days">T·ªïng c·ªông: <strong>${diffDays}</strong> ng√†y y√™u nhau</p>
        </div>
    `;
}

// Start romantic effects
createRomanticEffects();
